<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:ext="clr-namespace:WpfConverters"
    xmlns:system="clr-namespace:System;assembly=mscorlib"
    xmlns:format="clr-namespace:WpfConverters.Converters.Format;assembly=WpfConverters"
    xmlns:custom="clr-namespace:WpfConverters.Controls"
    xmlns:common="clr-namespace:WpfConverters.Converters.Common"
    xmlns:impl="clr-namespace:WpfConverters.Controls.Impl"
    mc:Ignorable="d">



    <system:Boolean x:Key="True">True</system:Boolean>
    <system:Boolean x:Key="False">False</system:Boolean>

    <SolidColorBrush x:Key="Static.Background" Color="#FFFFFFFF" />
    <SolidColorBrush x:Key="MouseOver.Background" Color="#3300A2FF" />
    <SolidColorBrush x:Key="Pressed.Background" Color="#334AA7D6" />
    <SolidColorBrush x:Key="Disabled.Background" Color="#7FE0E0E0" />
    <SolidColorBrush x:Key="Static.Foreground" Color="#FF121212" />
    <SolidColorBrush x:Key="Disabled.Foreground" Color="#7F242424" />
    <SolidColorBrush x:Key="Static.Border" Color="#FFABADB3" />
    <SolidColorBrush x:Key="MouseOver.Border" Color="#FF7EB4EA" />
    <SolidColorBrush x:Key="Focus.Border" Color="#FF569DE5" />
    <SolidColorBrush x:Key="Pressed.Border" Color="#FF2C628B" />
    <SolidColorBrush x:Key="Disabled.Border" Color="#FFADB2B5" />


    <!--******************** TextBox ********************-->
    <Style TargetType="{x:Type TextBox}">
        <Setter Property="Background" Value="{StaticResource Static.Background}"/>
        <Setter Property="BorderBrush" Value="{StaticResource Static.Border}"/>
        <Setter Property="Foreground" Value="{StaticResource Static.Foreground}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="KeyboardNavigation.TabNavigation" Value="None"/>
        <Setter Property="HorizontalContentAlignment" Value="Left"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="AllowDrop" Value="True"/>
        <Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst"/>
        <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
        <Setter Property="MinHeight" Value="24"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBox}">
                    <Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}"
                            Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
                        <ScrollViewer x:Name="PART_ContentHost" Focusable="False" HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility="Hidden"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" TargetName="border" Value="0.56"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource MouseOver.Border}"/>
                        </Trigger>
                        <Trigger Property="IsKeyboardFocused" Value="True">
                            <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Focus.Border}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsInactiveSelectionHighlightEnabled" Value="True"/>
                    <Condition Property="IsSelectionActive" Value="False"/>
                </MultiTrigger.Conditions>
                <Setter Property="SelectionBrush" Value="{DynamicResource {x:Static SystemColors.InactiveSelectionHighlightBrushKey}}"/>
            </MultiTrigger>
        </Style.Triggers>
    </Style>

    <!--******************** ClearButton ********************-->
    <Style x:Key="ClearButtonStyle" TargetType="{x:Type Button}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border HorizontalAlignment="{TemplateBinding HorizontalAlignment}" VerticalAlignment="{TemplateBinding VerticalAlignment}"
                            Margin="{TemplateBinding Margin}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}"
                            Width="{TemplateBinding Width}" Height="{TemplateBinding Height}" Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}">
                        <TextBlock Foreground="{TemplateBinding Foreground}" FontSize="{TemplateBinding FontSize}" Margin="1,-3,0,0" Padding="0"
                                   HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                            <ContentPresenter Content="{Binding Path=Content, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Button}}}"
                                              HorizontalAlignment="Center" VerticalAlignment="Center" UseLayoutRounding="True" />
                        </TextBlock>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Foreground" Value="Black" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Content" Value="×" />
        <Setter Property="FontSize" Value="16" />
        <Setter Property="HorizontalAlignment" Value="Right" />
        <Setter Property="VerticalAlignment" Value="Stretch" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Padding" Value="0" />
        <Setter Property="Margin" Value="0" />
        <Setter Property="Width" Value="{Binding RelativeSource={RelativeSource Self}, Path=ActualHeight}" />

        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Foreground" Value="DodgerBlue" />
                <Setter Property="BorderBrush" Value="DodgerBlue" />
                <Setter Property="BorderThickness" Value="1" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Foreground" Value="SlateGray" />
                <Setter Property="BorderThickness" Value="0" />
            </Trigger>
        </Style.Triggers>
    </Style>
    
    <!--******************** NumericUpDownBase ********************-->
    <Style TargetType="{x:Type impl:NumericUpDownBase}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type impl:NumericUpDownBase}">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition />
                            <ColumnDefinition Width="Auto" />
                        </Grid.ColumnDefinitions>
                        <Border Grid.Column="0" Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}">
                            <Grid>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition />
                                    <ColumnDefinition Width="Auto" />
                                    <ColumnDefinition Width="Auto" />
                                </Grid.ColumnDefinitions>
                                <Grid.RowDefinitions>
                                    <RowDefinition />
                                    <RowDefinition />
                                </Grid.RowDefinitions>
                                <TextBox x:Name="PART_InputTextBox" Grid.Row="0" Grid.RowSpan="2" Grid.Column="0"
                                         Background="Transparent" BorderBrush="{x:Null}" BorderThickness="0"
                                         VerticalAlignment="Center" VerticalContentAlignment="Center"
                                         IsReadOnly="{TemplateBinding IsReadOnly}" />

                                <RepeatButton x:Name="PART_IncrementButton" Grid.Row="0" Grid.Column="1"
                                              BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="1,0,0,0.5"
                                              Background="{TemplateBinding Background}"
                                              IsEnabled="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=IsReadOnly, Converter={common:InverseBooleanConverter}}"
                                              Visibility="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=IsReadOnly, Converter={common:InverseBooleanToVisibilityConverter}}">
                                    <Path Margin="3,2" Data="M 0 40 L 35 0 L 70 40 Z" Fill="{TemplateBinding Foreground}" Stretch="Uniform" />
                                </RepeatButton>
                                <RepeatButton x:Name="PART_DecrementButton" Grid.Row="1" Grid.Column="1"
                                              BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="1,0.5,0,0"
                                              Background="{TemplateBinding Background}"
                                              IsEnabled="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=IsReadOnly, Converter={common:InverseBooleanConverter}}"
                                              Visibility="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=IsReadOnly, Converter={common:InverseBooleanToVisibilityConverter}}">
                                    <Path Margin="3,2" Data="M 0 0 L 35 40 L 70 0 Z" Fill="{TemplateBinding Foreground}" Stretch="Uniform" />
                                </RepeatButton>
                            </Grid>
                        </Border>

                        <Button x:Name="PART_ClearButton" Grid.Column="1" Style="{StaticResource ClearButtonStyle}"
                                Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}"
                                Visibility="{Binding IsRequired, RelativeSource={RelativeSource TemplatedParent}, Converter={common:InverseBooleanToVisibilityConverter}, Mode=OneWay}"/>
                    </Grid>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="BorderBrush" Value="{StaticResource MouseOver.Border}" />
                        </Trigger>
                        <Trigger Property="IsFocused" Value="True">
                            <Setter Property="BorderBrush" Value="{StaticResource Focus.Border}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Background" Value="{StaticResource Static.Background}"/>
        <Setter Property="BorderBrush" Value="{StaticResource Static.Border}"/>
        <Setter Property="Foreground" Value="{StaticResource Static.Foreground}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="KeyboardNavigation.TabNavigation" Value="None"/>
        <Setter Property="HorizontalContentAlignment" Value="Left"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="AllowDrop" Value="False"/>
        <Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst"/>
        <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
        <Setter Property="Height" Value="24"/>
    </Style>

    <!--******************** Int32UpDown ********************-->
    <Style TargetType="{x:Type impl:Int32UpDown}" BasedOn="{StaticResource {x:Type impl:NumericUpDownBase}}">
        <Setter Property="Minimum" Value="{x:Static system:Int32.MinValue}" />
        <Setter Property="Maximum" Value="{x:Static system:Int32.MaxValue}" />
        <Setter Property="Step" Value="1" />
        <Setter Property="DecimalPlaces" Value="0" />
        <Style.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="Value" Value="{x:Null}" />
                    <Condition Property="IsRequired" Value="True" />
                </MultiTrigger.Conditions>
                <MultiTrigger.Setters>
                    <Setter Property="BorderBrush" Value="Red" />
                </MultiTrigger.Setters>
            </MultiTrigger>
        </Style.Triggers>
    </Style>


    <!--******************** Int64UpDown ********************-->
    <Style TargetType="{x:Type impl:Int64UpDown}" BasedOn="{StaticResource {x:Type impl:NumericUpDownBase}}">
        <Setter Property="Minimum" Value="{x:Static system:Int64.MinValue}" />
        <Setter Property="Maximum" Value="{x:Static system:Int64.MaxValue}" />
        <Setter Property="Step" Value="1" />
        <Setter Property="DecimalPlaces" Value="0" />
        <Style.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="Value" Value="{x:Null}" />
                    <Condition Property="IsRequired" Value="True" />
                </MultiTrigger.Conditions>
                <MultiTrigger.Setters>
                    <Setter Property="BorderBrush" Value="Red" />
                </MultiTrigger.Setters>
            </MultiTrigger>
        </Style.Triggers>
    </Style>


    <!--******************** DecimalUpDown ********************-->
    <Style TargetType="{x:Type impl:DecimalUpDown}" BasedOn="{StaticResource {x:Type impl:NumericUpDownBase}}">
        <Setter Property="Minimum" Value="{x:Static system:Decimal.MinValue}" />
        <Setter Property="Maximum" Value="{x:Static system:Decimal.MaxValue}" />
        <Setter Property="Step" Value="{x:Static system:Decimal.One}" />
        <Setter Property="DecimalPlaces" Value="2" />
        <Style.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="Value" Value="{x:Null}" />
                    <Condition Property="IsRequired" Value="True" />
                </MultiTrigger.Conditions>
                <MultiTrigger.Setters>
                    <Setter Property="BorderBrush" Value="Red" />
                </MultiTrigger.Setters>
            </MultiTrigger>
        </Style.Triggers>
    </Style>


    <!--******************** DoubleUpDown ********************-->
    <Style TargetType="{x:Type impl:DoubleUpDown}" BasedOn="{StaticResource {x:Type impl:NumericUpDownBase}}">
        <Style.Resources>
            <system:Double x:Key="DoubleOne">1</system:Double>
        </Style.Resources>
        <Setter Property="Minimum" Value="{x:Static system:Double.MinValue}" />
        <Setter Property="Maximum" Value="{x:Static system:Double.MaxValue}" />
        <Setter Property="Step" Value="{StaticResource DoubleOne}" />
        <Setter Property="DecimalPlaces" Value="2" />
        <Style.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="Value" Value="{x:Null}" />
                    <Condition Property="IsRequired" Value="True" />
                </MultiTrigger.Conditions>
                <MultiTrigger.Setters>
                    <Setter Property="BorderBrush" Value="Red" />
                </MultiTrigger.Setters>
            </MultiTrigger>
        </Style.Triggers>
    </Style>

</ResourceDictionary>